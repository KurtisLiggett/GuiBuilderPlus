; #HEADER# ======================================================================================================================
; Title .........: GuiBuilderPlus_codeGeneration.au3
; Description ...: Code generation and management
; ===============================================================================================================================


;------------------------------------------------------------------------------
; Title...........: _code_generation
; Description.....: generate the au3 code
; Return..........: code as string
;------------------------------------------------------------------------------
Func _code_generation($x = -1, $y = -1)
	Local $controls

	;set up the region tags
	Local $regionStart = "#Region (=== GUI generated by " & $progName & " " & $progVersion & " ===)"
	Local $regionEnd = "#EndRegion (=== GUI generated by " & $progName & " " & $progVersion & " ===)"

	;function documentation template <-- planning on making this a map eventually
	Local $mDocData[]
	$mDocData.name = "_main"
	$mDocData.description = "run the main program loop"
	Local $mainFunctionDoc = _functionDoc($mDocData) & @CRLF

	; Mod by: TheSaint - default includes
	Local $includes = "#include <Constants.au3>" & @CRLF & _
			"#include <GUIConstantsEx.au3>" & @CRLF & _
			"#include <Misc.au3>" & @CRLF & _
			"#include <WindowsConstants.au3>"

	Local Const $ctrl_count = $mControls.ControlCount
	For $i = 1 To $ctrl_count
		;generate includes
		$includes &= _generate_includes($i, $includes)

		;generate controls
		$controls &= _generate_controls($i)
	Next

	Local $sGuiFunc = "", $bGuiFunc = 0
	If $bGuiFunc Then
		$sGuiFunc = "" & _
				@TAB & "_createGUI()" & @CRLF & @CRLF
	EndIf

	Local $mainProg = "" & _
			"GUISetState(@SW_SHOWNORMAL)" & @CRLF & @CRLF & _
			"_main()" & @CRLF & @CRLF & _
			$mainFunctionDoc & _
			"Func _main()" & @CRLF & _
			$sGuiFunc & _
			@TAB & "While 1" & @CRLF & @TAB & _
			@TAB & "Switch GUIGetMsg()" & @CRLF & @TAB & @TAB & _
			@TAB & "Case $GUI_EVENT_CLOSE" & @CRLF & @TAB & @TAB & @TAB & _
			@TAB & "ExitLoop" & @CRLF & @CRLF & @TAB & @TAB & _
			@TAB & "Case Else" & @CRLF & @TAB & @TAB & @TAB & _
			@TAB & ";" & @CRLF & @TAB & _
			@TAB & "EndSwitch" & @CRLF & _
			@TAB & "WEnd" & @CRLF & _
			"EndFunc   ;==>_main"

	Local Const $w = $win_client_size[0]
	Local Const $h = $win_client_size[1]

	If $mainName = "" Then
		$mainName = "hGUI"
	EndIf

	; Mod by TheSaint
	Local Const $code = "" & _
			$includes & @CRLF & @CRLF & _
			$regionStart & @CRLF & _
			"Global $MainStyle = BitOR($WS_OVERLAPPED, $WS_CAPTION, $WS_SYSMENU, $WS_VISIBLE, $WS_CLIPSIBLINGS, $WS_MINIMIZEBOX)" & @CRLF & _
			"Global $" & $mainName & " = GUICreate(" & $gdtitle & ", " & $w & ", " & $h & ", " & $x & ", " & $y & ", $MainStyle)" & @CRLF & @CRLF & _
			$controls & _
			$regionEnd & @CRLF & @CRLF & _
			$mainProg & @CRLF
	Return $code
EndFunc   ;==>_code_generation


;------------------------------------------------------------------------------
; Title...........: _functionDoc
; Description.....: generate the function doc based on template
;------------------------------------------------------------------------------
Func _functionDoc($mDocData)
	If Not IsMap($mDocData) Then Return ""

	Local $sFileData = FileRead(@ScriptDir & "\storage\templateFunctionDoc.au3")
	If @error Then Return ""

	$sFileData = StringRegExpReplace($sFileData, "\%\%name\%\%", $mDocData.name)
	$sFileData = StringRegExpReplace($sFileData, "\%\%description\%\%", $mDocData.description)

	Return $sFileData
EndFunc   ;==>_functionDoc


;------------------------------------------------------------------------------
; Title...........: _generate_controls
; Description.....: generate the code for the controls
;------------------------------------------------------------------------------
Func _generate_controls(Const $i)
	Local Const $mCtrl = $mControls[$i]

	Local Const $ltwh = $mCtrl.Left & ", " & $mCtrl.Top & ", " & $mCtrl.Width & ", " & $mCtrl.Height

	; The general template is GUICtrlCreateXXX( "text", left, top [, width [, height [, style [, exStyle]]] )
	; but some controls do not use this.... Avi, Icon, Menu, Menuitem, Progress, Tabitem, TreeViewitem, updown
	Local $mControls

	Switch StringStripWS($mCtrl.Name, $STR_STRIPALL) <> ''
		Case True
;~ 			$mControls = "Global $" & $mCtrl.Type & '_' & $i & " = "
			$mControls = "Global $" & $mCtrl.Name & " = "
	EndSwitch

	Switch $mCtrl.Type
		Case "Progress", "Slider", "TreeView" ; no text field
			$mControls &= "GUICtrlCreate" & $mCtrl.Type & '(' & $ltwh & ")" & @CRLF

		Case "Icon" ; extra iconid [set to zero]
			$mControls &= "GUICtrlCreate" & $mCtrl.Type & '("' & $mCtrl.Text & '", 0, ' & $ltwh & ")" & @CRLF

		Case "Tab"
			$mControls &= "GUICtrlCreate" & $mCtrl.Type & '(' & $ltwh & ')' & @CRLF
			Local $tabCount = $mCtrl.TabCount
			Local $tabs = $mCtrl.Tabs
			Local $tab

			For $j = 1 To $tabCount
				$tab = $tabs[$j]
				$mControls &= "Global $" & $tab.Name & " = "
				$mControls &= 'GUICtrlCreateTabItem("' & $tab.Text & '")' & @CRLF
				$mControls &= 'GUICtrlCreateTabItem("")' & @CRLF
			Next


		Case "Updown"
			$mControls &= "GUICtrlCreateInput" & '("' & $mCtrl.Text & '", ' & $ltwh & ")" & @CRLF
			$mControls &= "GUICtrlCreateUpdown(-1)" & @CRLF

		Case "Pic"
			$mControls &= "GUICtrlCreate" & $mCtrl.Type & '("", ' & $ltwh & ")" & @CRLF
			$mControls &= "GUICtrlSetImage(-1, " & '"' & $samplebmp & '")' & @CRLF

		Case Else
			$mControls &= "GUICtrlCreate" & $mCtrl.Type & '("' & $mCtrl.Text & '", ' & $ltwh & ")" & @CRLF
	EndSwitch

	If $mCtrl.Color <> -1 Then
		$mControls &= "GUICtrlSetColor(-1, 0x" & Hex($mCtrl.Color, 6) & ")" & @CRLF
	EndIf
	If $mCtrl.Background <> -1 Then
		$mControls &= "GUICtrlSetBkColor(-1, 0x" & Hex($mCtrl.Background, 6) & ")" & @CRLF
	EndIf

	Return $mControls
EndFunc   ;==>_generate_controls


;------------------------------------------------------------------------------
; Title...........: _generate_includes
; Description.....: generate the code for the includes
;------------------------------------------------------------------------------
Func _generate_includes(Const $i, Const $includes)
	Local Const $mCtrl = $mControls[$i]

	Switch $mCtrl.Type
		Case "Button", "Checkbox", "Group", "Radio"
			If Not StringInStr($includes, "<ButtonConstants.au3>") Then
				Return @CRLF & "#include <ButtonConstants.au3>"
			EndIf

		Case "Tab"
			If Not StringInStr($includes, "<GUITab.au3>") Then
				Return @CRLF & "#include <GUITab.au3>"
			EndIf

		Case "Date"
			If Not StringInStr($includes, "<DateTimeConstants.au3>") Then
				Return @CRLF & "#include <DateTimeConstants.au3>"
			EndIf

		Case "Edit", "Input"
			If Not StringInStr($includes, "<EditConstants.au3>") Then
				Return @CRLF & "#include <EditConstants.au3>"
			EndIf

		Case "Icon", "Label", "Pic"
			If Not StringInStr($includes, "<StaticConstants.au3>") Then
				Return @CRLF & "#include <StaticConstants.au3>"
			EndIf

		Case "List"
			If Not StringInStr($includes, "<ListBoxConstants.au3>") Then
				Return @CRLF & "#include <ListBoxConstants.au3>"
			EndIf

		Case "Progress", "Slider", "TreeView", "Combo"
			If Not StringInStr($includes, '<' & $mCtrl.Type & "Constants.au3>") Then
				Return @CRLF & "#include <" & $mCtrl.Type & "Constants.au3>"
			EndIf
	EndSwitch

	Return ""
EndFunc   ;==>_generate_includes

;------------------------------------------------------------------------------
; Title...........: _save_code
; Description.....: generate the au3 code and save to file
;------------------------------------------------------------------------------
Func _save_code()
	Local $code = _code_generation()
	_copy_code_to_output($code)
EndFunc   ;==>_save_code


;------------------------------------------------------------------------------
; Title...........: _copy_code_to_output
; Description.....: Save generated code to file
;------------------------------------------------------------------------------
Func _copy_code_to_output(Const $code)
	; mod by: TheSaint
	Switch StringInStr($CmdLineRaw, "/StdOut")
		Case True
			ConsoleWrite("#region ; --- " & $progName & " generated code Start ---" & @CRLF & _
					StringReplace($code, @CRLF, @LF) & @CRLF & _
					"#endregion ; --- " & $progName & " generated code End ---" & @CRLF)

		Case False
			If $mygui = "" Then
				$mygui = "MyGUI.au3"
			EndIf

			Local Const $destination = FileSaveDialog("Save GUI to file?", "", "AutoIt (*.au3)", BitOR($FD_FILEMUSTEXIST, $FD_PATHMUSTEXIST, $FD_PROMPTOVERWRITE), $mygui)

			If @error = 1 Or Not $destination Then
				ClipPut($code)
				$bStatusNewMessage = True
				_GUICtrlStatusBar_SetText($hStatusbar, "Script copied to clipboard")

;~ 				SplashTextOn("Done", @CRLF & "Script copied to clipboard!", 200, 100)
			Else
				FileDelete($destination)

				FileWrite($destination, $code)

				$bStatusNewMessage = True
				_GUICtrlStatusBar_SetText($hStatusbar, "Saved to file")
;~ 				SplashTextOn("Done", @CRLF & "Saved to file!", 200, 100)
			EndIf

;~ 			Sleep(1000)

;~ 			SplashOff()
	EndSwitch
	; END of modification by TheSaint
EndFunc   ;==>_copy_code_to_output
